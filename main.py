
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage , Frame , Scrollbar, Label, ttk, Toplevel

from PIL import Image, ImageTk

import os
import algo_smi

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\sapin\Desktop\Smith_Chart_Impedance_calculator\Tkinter_Design\build\build\assets\frame0")

IMAGE_SIZE = (250, 250)  # Resize images to fit the frame

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def load_images(image_dir):
    images = []
    for filename in os.listdir(image_dir):
        if filename.lower().endswith((".png", ".jpg", ".jpeg", ".gif")):
            img_path = os.path.join(image_dir, filename)
            img = Image.open(img_path)
            img.thumbnail(IMAGE_SIZE)  # Resize while keeping aspect ratio
            images.append(ImageTk.PhotoImage(img))
    return images

def clean_scrollable_frame():

    for widget in scrollable_frame.winfo_children():
            widget.destroy()


def info_window():
    popup = Toplevel(window)
    popup.title("About")
    popup.geometry("250x100")
    popup.iconphoto(False, icon)
    popup_width = 250
    popup_height = 100
    
    # Get the size and position of the main window
    root_x = window.winfo_x()
    root_y = window.winfo_y()
    root_width = window.winfo_width()
    root_height = window.winfo_height()

    # Calculate position to center the popup over the main window
    pos_x = root_x + (root_width - popup_width) // 2
    pos_y = root_y + (root_height - popup_height) // 2

    popup.geometry(f"{popup_width}x{popup_height}+{pos_x}+{pos_y}")

    canvas = Canvas(
        popup,
        bg = "#144271",
        height = 100,
        width = 250,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    label = Label(popup, text="Tool to find optimized lumped or continous network to maximize power transfer between output and load",bg=canvas["bg"], fg="white",wraplength=250,justify="left")
    label.pack(pady=15)
    popup.resizable(False, False)

def check_input(entry):
     
    string_aux=entry.get()
    if(string_aux==""):
        entry.insert(0,"0")
        return "0"
    else:
         return string_aux


def displayResults_discr_comp():
        
        clean_scrollable_frame()

        
        IS_Real=float(check_input(entry_6))
        IS_Compl=float(check_input(entry_1))
        IC_Real=float(check_input(entry_2))
        IC_Compl=float(check_input(entry_3))
        ICarac=int(check_input(entry_4))
        Freq=float(check_input(entry_5))

        combo_list
        currOGrand=combo_list.get()
        if(currOGrand=='MHz'):
            Freq=Freq*10**6
        if(currOGrand=='GHz'):
             Freq=Freq*10**9
        if(currOGrand=='THz'):
            Freq=Freq*10**12

        print(Freq)
        #array_labels=[self.label_9,self.label_8,self.label_11,self.label_12]
        array_labels=[]

        #Returns images
        images_display=algo_smi.algoritmo(IS_Real,IS_Compl,IC_Real,IC_Compl,ICarac,Freq,array_labels)

        print(images_display)

        for i,img in enumerate(images_display):
             
            label = Label(scrollable_frame, image=img)
            label.image=img
            label.grid(row=i, column=0, padx=5, pady=5)

        #print(images_display)

def displayResults_contin_comp():

        clean_scrollable_frame()
        
        IS_Real=float(entry_6.get())
        IS_Compl=float(entry_1.get())
        IC_Real=float(entry_2.get())
        IC_Compl=float(entry_3.get())
        ICarac=int(entry_5.get())
        Freq=float(entry_4.get())


        currOGrand=combo_list.get()
        if(currOGrand=='MHz'):
            Freq=Freq*10**6
        if(currOGrand=='GHz'):
            Freq=Freq*10**9
        if(currOGrand=='THz'):
            Freq=Freq*10**12
        # array_labels=[self.label_9,self.label_8,self.label_11,self.label_12]
        array_labels=[]

        #Returns images
        images_display=algo_smi.algoritmo_stubs(IS_Real,IS_Compl,IC_Real,IC_Compl,ICarac,Freq,array_labels)

        print(images_display)

        for i,img in enumerate(images_display):
             
            label = Label(scrollable_frame, image=img)
            label.image=img
            label.grid(row=i, column=0, padx=5, pady=5) 


window = Tk()
window.title("Network Calculator")
window.geometry("709x542")
window.configure(bg = "#FFFFFF")

icon = PhotoImage(file="Images/icon.png")
window.iconphoto(False, icon)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 542,
    width = 709,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    354.0,
    271.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    527.0,
    287.0,
    image=image_image_2
)

canvas.create_text(
    29.0,
    80.0,
    anchor="nw",
    text="Real Part",
    fill="#FFFFFF",
    font=("IBMPlexSans", 15 * -1)
)

canvas.create_text(
    193.0,
    80.0,
    anchor="nw",
    text="Imaginary Part",
    fill="#FFFFFF",
    font=("IBMPlexSans", 15 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    255.5,
    119.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#EBEDF0",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=194.0,
    y=106.0,
    width=123.0,
    height=25.0
)

canvas.create_text(
    29.0,
    204.0,
    anchor="nw",
    text="Real Part",
    fill="#FFFFFF",
    font=("IBMPlexSans", 15 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    91.5,
    244.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#EBEDF0",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=30.0,
    y=231.0,
    width=123.0,
    height=25.0
)

canvas.create_text(
    193.0,
    204.0,
    anchor="nw",
    text="Imaginary Part",
    fill="#FFFFFF",
    font=("IBMPlexSans", 15 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    255.5,
    244.5,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#EBEDF0",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=194.0,
    y=231.0,
    width=123.0,
    height=25.0
)

canvas.create_text(
    18.0,
    29.0,
    anchor="nw",
    text="Output Impedance ( ZT )",
    fill="#D9E0E5",
    font=("IBMPlexSans SemiBold", 27 * -1)
)

canvas.create_text(
    18.0,
    156.0,
    anchor="nw",
    text="Load Impedance ( ZC )",
    fill="#D9E0E5",
    font=("IBMPlexSans SemiBold", 27 * -1)
)

canvas.create_text(
    193.0,
    302.0,
    anchor="nw",
    text="Line Impedance",
    fill="#FFFFFF",
    font=("IBMPlexSans Regular", 15 * -1)
)

canvas.create_text(
    29.0,
    302.0,
    anchor="nw",
    text="Frequency",
    fill="#FFFFFF",
    font=("IBMPlexSans Regular", 15 * -1)
)

style = ttk.Style()
style.configure("Custom.TCombobox", fieldbackground="#EBEDF0", background="#EBEDF0")

combo_list = ttk.Combobox(
    state="readonly",
    values=["kHz", "MHz", "GHz", "THz"],
    style="Custom.TCombobox"
)


# Remove selection highlight effect
def remove_highlight(event):
    button_1.focus()

combo_list.bind("<FocusIn>", remove_highlight)

combo_list.place(

    x=104,
    y=328.3,
    width=50,
    height=28


)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=1,
    highlightthickness=0,
    command=displayResults_contin_comp,
    relief="flat"
)
button_1.place(
    x=39.0,
    y=464.000244140625,
    width=295.0,
    height=38.0
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    186.0,
    389.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    186.0,
    277.0,
    image=image_image_4
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    255.5,
    341.5,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#EBEDF0",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=194.0,
    y=328.0,
    width=123.0,
    height=25.0
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    66.5,
    341.5,
    image=entry_image_5
)
entry_5 = Entry(
    bd=0,
    bg="#EBEDF0",
    fg="#000716",
    highlightthickness=0
)
entry_5.place(
    x=30.0,
    y=328.0,
    width=73.0,
    height=25.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=1,
    highlightthickness=0,
    command=displayResults_discr_comp,
    relief="flat"
)
button_2.place(
    x=39.0,
    y=410.000244140625,
    width=295.0,
    height=38.0
)

entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    91.5,
    119.5,
    image=entry_image_6
)
entry_6 = Entry(
    bd=0,
    bg="#EBEDF0",
    fg="#000716",
    highlightthickness=0
)
entry_6.place(
    x=30.0,
    y=106.0,
    width=123.0,
    height=25.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=1,
    highlightthickness=0,
    command=info_window,
    relief="flat"
)
button_3.place(
    x=653.0,
    y=9.0,
    width=29.0,
    height=28.0
)

canvas.create_rectangle(
    387.0,
    57.0,
    679.0,
    518.0,
    fill="#BDC3CB",
    outline="")

# Frame for inserting results

frame_container=Frame(canvas,bg = "#BDC3CB",height=461,width=292,bd=0,highlightthickness = 0)

frame_container.place(x=387,y=57)

canvas_scroll=Canvas(frame_container,bg ="#BDC3CB",height=461,width=270,bd=0,highlightthickness = 0)

canvas_scroll.place(x=387,y=57)



scrollbar=Scrollbar(frame_container,orient="vertical",command=canvas_scroll.yview)

scrollable_frame=Frame(canvas_scroll,bg ="#BDC3CB",bd=0,highlightthickness = 0)

scrollable_frame.bind(
    "<Configure>",
    lambda e: canvas_scroll.configure(
        scrollregion=canvas_scroll.bbox("all")
    )
)

canvas_scroll.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas_scroll.configure(yscrollcommand=scrollbar.set)


canvas_scroll.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")



#Add Default Images
img = Image.open("Images/white.png")
img1 =Image.open("Images/Default_image.png")
img.thumbnail(IMAGE_SIZE)  # Resize while keeping aspect ratio
img1.thumbnail(IMAGE_SIZE)

images=[]
images.append(ImageTk.PhotoImage(img))
images.append(ImageTk.PhotoImage(img1))
images.append(ImageTk.PhotoImage(img))


image_refs = []  # Prevent images from being garbage collected
for i, img in enumerate(images):
    label = Label(scrollable_frame, image=img)
    label.grid(row=i, column=0, padx=5, pady=5)
    image_refs.append(img)

window.resizable(False, False)

if __name__ == "__main__":
    window.mainloop()
